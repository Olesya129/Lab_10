import java.io.*;
import java.text.DecimalFormat;
import java.util.Objects;

import static java.lang.Integer.parseInt;
import static java.lang.Math.*;

public class class15 {
    public static void main(String[] args) throws IOException {
        File file = new File("C:\\Users\\tosch\\OneDrive\\Рабочий стол\\text15.txt");
        File file1 = new File("C:\\Users\\tosch\\OneDrive\\Рабочий стол\\text15_1.txt");
        FileWriter fwriter = new FileWriter(file1);
        BufferedReader fread = new BufferedReader(new FileReader(file));

        Double uch=0.0, otnOzera=0.0, otnKluch=0.0;
        int cnt=0,n=1;
        DecimalFormat proc = new DecimalFormat("###.##");

        fwriter.write("N участка   Площадь участка   Кол-во объектов   % площади к озеру   % площади к ключу\n\n");
        while (fread.ready()){
            String [] dannie = fread.readLine().split(" ");
            String [] uchastok=dannie;
            cnt =0;
            for(int i = 0; i< dannie.length;i++){
                String [] struktura = dannie[i].split("[);]");

                if (Objects.equals(struktura[0], "1")){
                    uchastok=struktura;
                    uch=square_Of_4(struktura,uchastok);
                    uchastok = struktura;
                }

                if (Objects.equals(struktura[0], "2") && square_Of_4(struktura,uchastok)>0.0) {
                    cnt++;
                }
                if (Objects.equals(struktura[0], "5") && square_Of_4(struktura,uchastok)>0.0) {
                    cnt++;
                }
                if (Objects.equals(struktura[0], "4")){

                    if(uch!=0){
                        otnKluch = otnosh(struktura,uch,uchastok);cnt++;
                        if(otnKluch>0.0){
                            cnt++;
                        }
                    }
                }

                if (Objects.equals(struktura[0], "3")){

                    if(uch!=0){
                        otnOzera = otnosh(struktura,uch,uchastok);cnt++;
                        if (otnOzera>0.0){
                            cnt++;
                        }
                    }
                }
            }
            fwriter.write(n + "\t\t\t" + uch + "\t\t\t" + cnt+"\t\t\t"+proc.format(otnOzera)+"\t\t\t"+proc.format(otnKluch)+"\n\n");
            n++;
        }
        fwriter.close();
    }
    public static double square_Of_4(String[] dannie,String[] uchastok){
        int x1 = parseInt(dannie[1]);
        int y1 = parseInt(dannie[2]);
        int x2 = parseInt(dannie[3]);
        int y2 = parseInt(dannie[4]);
        int x3 = parseInt(dannie[5]);
        int y3 = parseInt(dannie[6]);
        int x4 = parseInt(dannie[7]);
        int y4 = parseInt(dannie[8]);
        if (inArea(uchastok,dannie)){
            return abs((x2 - x1) * (y2 + y1)+(x3 - x2) * (y3 + y2) + (x4 - x3) * (y4 + y3)+(x1 - x4) * (y1 + y4))/2.0;
        }

        return 0;
    }
    public static double otnosh(String[] dannie,double g,String [] dannie1){

        if(isCircleInsideRectangle(dannie,dannie1)){
            return (PI*pow(Integer.parseInt(dannie[3]),2)/g)*100;
        }
        return 0;
    }
    public static boolean inArea(String [] uchastok,String [] dannie1) {
        int x1=Integer.parseInt(dannie1[1]),
                y1=Integer.parseInt(dannie1[2]),
                x2=Integer.parseInt(dannie1[3]),
                y2=Integer.parseInt(dannie1[4]),
                x3=Integer.parseInt(dannie1[5]),
                y3=Integer.parseInt(dannie1[6]),
                x4=Integer.parseInt(dannie1[7]),
                y4=Integer.parseInt(dannie1[8]),
                x11=Integer.parseInt(uchastok[1]),
                y11=Integer.parseInt(uchastok[2]),
                x21=Integer.parseInt(uchastok[3]),
                y21=Integer.parseInt(uchastok[4]),
                x31=Integer.parseInt(uchastok[5]),
                y31=Integer.parseInt(uchastok[6]),
                x41=Integer.parseInt(uchastok[7]),
                y41=Integer.parseInt(uchastok[8]);
        if ((((x11>=x1) & (x11<=x3) & (y11>=y1) & (y11<=y3))||((x11>=x2) & (x11<=x4) & (y11>=y2) & (y11<=y4)))&
                (((x21>=x1) & (x21<=x3) & (y21>=y1) & (y21<=y3))||((x21>=x2) & (x21<=x4) & (y21>=y2) & (y21<=y4)))&
                (((x31>=x1) & (x31<=x3) & (y31>=y1) & (y31<=y3))||((x31>=x2) & (x31<=x4) & (y31>=y2) & (y31<=y4)))&
                (((x41>=x1) & (x41<=x3) & (y41>=y1) & (y41<=y3))||((x41>=x2) & (x41<=x4) & (y41>=y2) & (y41<=y4)))){
            return true;
        }
        return false;
    }
    public static boolean isCircleInsideRectangle(String[] dannie, String [] dannie1) {

        int cx = Integer.parseInt(dannie[1]),
                cy = Integer.parseInt(dannie[2]),
                r = Integer.parseInt(dannie[3]),
                x1=Integer.parseInt(dannie1[1]),
                y1=Integer.parseInt(dannie1[2]),
                x2=Integer.parseInt(dannie1[3]),
                y2=Integer.parseInt(dannie1[4]),
                x3=Integer.parseInt(dannie1[5]),
                y3=Integer.parseInt(dannie1[6]),
                x4=Integer.parseInt(dannie1[7]),
                y4=Integer.parseInt(dannie1[8]);

        double d1 = Math.abs((y2-y1)*cx - (x2-x1)*cy + x2*y1 - y2*x1) / Math.sqrt(Math.pow(y2-y1, 2) + Math.pow(x2-x1, 2));
        double d2 = Math.abs((y3-y2)*cx - (x3-x2)*cy + x3*y2 - y3*x2) / Math.sqrt(Math.pow(y3-y2, 2) + Math.pow(x3-x2, 2));
        double d3 = Math.abs((y4-y3)*cx - (x4-x3)*cy + x4*y3 - y4*x3) / Math.sqrt(Math.pow(y4-y3, 2) + Math.pow(x4-x3, 2));
        double d4 = Math.abs((y1-y4)*cx - (x1-x4)*cy + x1*y4 - y1*x4) / Math.sqrt(Math.pow(y1-y4, 2) + Math.pow(x1-x4, 2));

        if (cx < Math.min(x1, Math.min(x2, Math.min(x3, x4))) || cx > Math.max(x1, Math.max(x2, Math.max(x3, x4)))
                || cy < Math.min(y1, Math.min(y2, Math.min(y3, y4))) || cy > Math.max(y1, Math.max(y2, Math.max(y3, y4)))) {
            return false;
        }

        if (d1 <= r || d2 <= r || d3 <= r || d4 <= r) {
            return false;
        }

        return true;
    }
}
